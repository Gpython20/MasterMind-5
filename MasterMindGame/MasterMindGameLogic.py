# coding=utf-8
import random
import unicodedata


from MasterMindGame.DTOs.GameStatDTO import GameStatDTO


class MasterMindGameLogic(object):
    """
    Class MasterMindGameLogic

    This class contains the logic and the operations adn rules for MasterMind game.
    This rules are based on board classic game.
    """
    limit_attempts = 12
    colors = ["green", "yellow", "red", "blue", "violet", "green", "yellow", "red", "blue", "violet"]

    # ========================================
    #               Constructor
    # ========================================

    def __init__(self, previous_game_stats=None):
        if previous_game_stats:
            self.game_stat = previous_game_stats
        else:
            self.game_stat = GameStatDTO()
            self.game_stat.SetKeyPattern(self._generateNewSecretPattern())

    # ========================================
    #           Public Methods
    # ========================================

    def GetGameStats(self):
        """
        Return game stat
        :return: object type <GameStatDto>
        """
        return self.game_stat

    def PlayMove(self, player_move):
        """
        Check game stats and gets the result player move with the pattern created.
         This function wraps
        the private method _checkPlayerMove()

        :param player_move: List[]

        :return: object type <Class.GameStatDTO>
        """

        if not self.game_stat.GameIsFinished():
            self.game_stat.IncrementAttemps()
            self.game_stat.AddPlayerMove(player_move)
            self._checkPlayerMove(player_move)
            if self.game_stat.GetAttemps() >= self.limit_attempts:
                self.game_stat.FinishGame()

        return self.game_stat

    # ========================================
    #           Private Methods
    # ========================================
    def _generateNewSecretPattern(self):
        """
        From list color generates new random pattern game
        
        :return: List[]
        """
        secret_pattern = random.sample(self.colors, 4)
        return secret_pattern


    def _checkPlayerMove(self, player_move):
        """
         Check the play and get if the pattern of
         the player has coincidences with the pattern generated by the game

        :param player_move: List[]
        :return: void
        """

        game_key_pattern = self.game_stat.GetKeyPattern()
        self.correct_color = ""
        self.guessed_color = ""

        if len(player_move) is 4:
            for i in range(4):
                player_color = player_move[i].encode("utf-8")
                if player_color not in self.colors:
                    continue
                player_color = player_move[i].encode("utf-8")
                if player_color == game_key_pattern[i]:
                    self.correct_color += "X"
                if player_color != game_key_pattern[i] and player_color in game_key_pattern:
                    self.guessed_color += "O"

            print (self.correct_color + self.guessed_color + "\n")
            self.game_stat.AddMoveResult(self.correct_color + self.guessed_color)